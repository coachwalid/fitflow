export type UserProfile = {
  sexe: "homme" | "femme";
  poids: number;
  taille: number;
  age: number;
  activite: "s√©dentaire" | "l√©ger" | "mod√©r√©" | "√©lev√©";
  estimatedBodyFat: number; // Pourcentage de masse grasse estim√©
};

export type NutritionResult = {
  metabolismeBase: number;
  caloriesMaintien: number;
  proteines: number;
  lipides: number;
  glucides: number;
  masseMaigre: number; // Ajout pour transparence
};

export function calculateMaintenanceNeeds(userProfile: UserProfile): NutritionResult {
  const { poids, taille, activite, estimatedBodyFat } = userProfile;

  console.log('üî¨ Calcul nutritionnel bas√© sur la composition corporelle (Katch-McArdle)');
  console.log(`üìä Donn√©es d'entr√©e: ${poids}kg, ${taille}cm, ${estimatedBodyFat}% de masse grasse, activit√©: ${activite}`);

  // 1. Calcul de la masse maigre (lean body mass)
  const masseMaigre = poids * (1 - estimatedBodyFat / 100);
  console.log(`üí™ Masse maigre calcul√©e: ${poids}kg √ó (1 - ${estimatedBodyFat}% / 100) = ${masseMaigre.toFixed(1)}kg`);

  // 2. BMR avec la formule Katch-McArdle UNIQUEMENT
  const metabolismeBase = 370 + (21.6 * masseMaigre);
  console.log(`üî• BMR (Katch-McArdle): 370 + (21.6 √ó ${masseMaigre.toFixed(1)}) = ${metabolismeBase.toFixed(0)}kcal`);

  // 3. Facteur d'activit√© pour le TDEE
  const facteurs = {
    "s√©dentaire": 1.2,
    "l√©ger": 1.375,
    "mod√©r√©": 1.55,
    "√©lev√©": 1.725,
  };
  const facteurActivite = facteurs[activite] || 1.2;
  const caloriesMaintien = metabolismeBase * facteurActivite;
  console.log(`‚ö° TDEE: ${metabolismeBase.toFixed(0)} √ó ${facteurActivite} = ${caloriesMaintien.toFixed(0)}kcal`);

  // 4. Calcul du poids objectif pour les macronutriments
  const tailleEnMetres = taille / 100;
  const poidsObjectif = 23 * (tailleEnMetres * tailleEnMetres);
  
  console.log(`üéØ Poids objectif (23 √ó ${taille}cm¬≤): ${poidsObjectif.toFixed(1)}kg`);

  // 5. Calcul des prot√©ines bas√© sur la masse maigre
  const proteines = masseMaigre * 2;
  console.log(`ü•© Prot√©ines (masse maigre √ó 2): ${masseMaigre.toFixed(1)}kg √ó 2 = ${proteines.toFixed(1)}g`);

  // 6. Calcul des lipides bas√© sur le poids objectif (1g/kg avec minimum 50g)
  let lipides = poidsObjectif * 1;
  
  // Minimum absolu de 50g
  if (lipides < 50) {
    console.log(`ü•ë Lipides calcul√©s (${lipides.toFixed(1)}g) < 50g ‚Üí application du minimum de s√©curit√©`);
    lipides = 50;
  }
  
  console.log(`ü•ë Lipides: ${poidsObjectif.toFixed(1)}kg √ó 1 = ${lipides.toFixed(1)}g`);

  // 7. Calcul des glucides (calories restantes)
  const caloriesProteines = proteines * 4;
  const caloriesLipides = lipides * 9;
  const caloriesRestantes = caloriesMaintien - (caloriesProteines + caloriesLipides);
  const glucides = Math.max(0, caloriesRestantes / 4);
  
  console.log(`üåæ Glucides: (${caloriesMaintien.toFixed(0)} - ${caloriesProteines.toFixed(0)} - ${caloriesLipides.toFixed(0)}) / 4 = ${glucides.toFixed(1)}g`);

  console.log('‚úÖ R√©sultats nutritionnels finaux (Katch-McArdle):');
  console.log(`   ‚Ä¢ BMR: ${Math.round(metabolismeBase)}kcal`);
  console.log(`   ‚Ä¢ TDEE: ${Math.round(caloriesMaintien)}kcal`);
  console.log(`   ‚Ä¢ Masse maigre: ${masseMaigre.toFixed(1)}kg`);
  console.log(`   ‚Ä¢ Prot√©ines: ${Math.round(proteines)}g (${(proteines * 4).toFixed(0)}kcal)`);
  console.log(`   ‚Ä¢ Lipides: ${Math.round(lipides)}g (${(lipides * 9).toFixed(0)}kcal)`);
  console.log(`   ‚Ä¢ Glucides: ${Math.round(glucides)}g (${(glucides * 4).toFixed(0)}kcal)`);

  return {
    metabolismeBase: Math.round(metabolismeBase),
    caloriesMaintien: Math.round(caloriesMaintien),
    proteines: Math.round(proteines),
    lipides: Math.round(lipides),
    glucides: Math.round(glucides),
    masseMaigre: Math.round(masseMaigre * 10) / 10
  };
}

/**
 * üÜï NOUVELLE LOGIQUE EXCLUSIVE: Calcul des glucides pour perte de poids (POIDS ACTUEL)
 * 
 * R√àGLES STRICTES:
 * - Niveau d'activit√© faible ou mod√©r√© : 2g √ó poids actuel
 * - Niveau d'activit√© √©lev√© ou tr√®s actif : 2.5g √ó poids actuel
 * - Le poids actuel est celui renseign√© par l'utilisateur
 * - Cette logique REMPLACE TOUTE logique pr√©c√©dente pour la perte de poids
 */
function calculateCarbsForWeightLoss(
  poidsActuel: number,
  activite: "s√©dentaire" | "l√©ger" | "mod√©r√©" | "√©lev√©"
): number {
  console.log('üÜï NOUVELLE LOGIQUE EXCLUSIVE: Calcul des glucides pour perte de poids (POIDS ACTUEL)');
  
  console.log(`üéØ Poids actuel utilis√©: ${poidsActuel.toFixed(1)}kg`);
  console.log(`üö´ SUPPRESSION: Plus d'utilisation du poids objectif pour les glucides`);
  
  // D√©termination du facteur glucidique selon le niveau d'activit√©
  let facteurGlucides: number;
  
  if (activite === "s√©dentaire" || activite === "l√©ger" || activite === "mod√©r√©") {
    facteurGlucides = 2.0;
    console.log(`üìä Niveau d'activit√© "${activite}" ‚Üí Facteur glucides: 2.0g/kg`);
  } else { // activite === "√©lev√©"
    facteurGlucides = 2.5;
    console.log(`üìä Niveau d'activit√© "${activite}" ‚Üí Facteur glucides: 2.5g/kg`);
  }
  
  // Calcul final des glucides
  const glucidesPertePoids = poidsActuel * facteurGlucides;
  
  console.log(`üåæ GLUCIDES PERTE DE POIDS (POIDS ACTUEL): ${poidsActuel.toFixed(1)}kg √ó ${facteurGlucides}g/kg = ${glucidesPertePoids.toFixed(1)}g`);
  console.log(`‚úÖ Nouvelle logique avec poids actuel appliqu√©e avec succ√®s`);
  
  return Math.round(glucidesPertePoids);
}

/**
 * üîÑ FONCTION MISE √Ä JOUR: R√©partition optimis√©e des macronutriments avec nouvelle logique glucides (POIDS ACTUEL)
 * 
 * CHANGEMENTS MAJEURS:
 * - Pour objectif "perte": utilise la NOUVELLE logique glucides exclusive (POIDS ACTUEL)
 * - Pour objectifs "maintien" et "prise": conserve l'ancienne logique
 * - Suppression de toutes les anciennes m√©thodes de calcul glucides pour la perte
 */
export function optimizeMacronutrientDistribution(
  caloriesTarget: number,
  masseMaigre: number,
  poidsObjectif: number,
  objectif: "perte" | "maintien" | "prise",
  activite: "s√©dentaire" | "l√©ger" | "mod√©r√©" | "√©lev√©",
  estimatedBodyFat: number,
  taille?: number, // ANCIEN: n√©cessaire pour le calcul perte de poids (poids objectif)
  poidsActuel?: number // NOUVEAU: n√©cessaire pour le calcul perte de poids (poids actuel)
): { proteines: number; lipides: number; glucides: number } {
  
  console.log('üîß R√âPARTITION MACRONUTRIMENTS AVEC NOUVELLE LOGIQUE GLUCIDES (POIDS ACTUEL)');
  console.log(`üìä Calories totales FIXES: ${caloriesTarget}kcal`);
  console.log(`üìä Objectif: ${objectif}`);
  console.log(`üìä Param√®tres: masse maigre ${masseMaigre}kg, poids objectif ${poidsObjectif}kg`);
  if (poidsActuel) {
    console.log(`üìä Poids actuel: ${poidsActuel}kg`);
  }
  
  // √âTAPE 1: Calcul des prot√©ines selon l'objectif et les caract√©ristiques
  let proteines: number;
  
  if (objectif === "prise") {
    // üÜï NOUVELLE LOGIQUE POUR PRISE DE MASSE
    console.log('üÜï NOUVELLE LOGIQUE PROT√âINES POUR PRISE DE MASSE');
    
    if (!poidsActuel) {
      throw new Error('Le poids actuel est requis pour le calcul des prot√©ines en prise de masse');
    }
    
    // D√©terminer le facteur prot√©ique selon le sexe et le body fat
    let facteurProteines: number;
    
    if (
      (masseMaigre / poidsActuel > 0.8 && estimatedBodyFat < 20) || // Homme avec body fat < 20%
      (masseMaigre / poidsActuel > 0.73 && estimatedBodyFat < 27)   // Femme avec body fat < 27%
    ) {
      facteurProteines = 2.2;
      console.log(`üéØ Body fat faible d√©tect√© (${estimatedBodyFat}%) ‚Üí Facteur prot√©ines: 2.2g/kg`);
    } else {
      facteurProteines = 2.0;
      console.log(`üìä Body fat standard (${estimatedBodyFat}%) ‚Üí Facteur prot√©ines: 2.0g/kg`);
    }
    
    proteines = poidsActuel * facteurProteines;
    console.log(`ü•© Prot√©ines (PRISE DE MASSE): ${poidsActuel}kg √ó ${facteurProteines}g/kg = ${proteines.toFixed(1)}g`);
  } else {
    // üîÑ ANCIENNE LOGIQUE pour maintien et perte (masseMaigre √ó 2g)
    proteines = masseMaigre * 2;
    console.log(`ü•© Prot√©ines (${objectif.toUpperCase()}): ${masseMaigre}kg √ó 2 = ${proteines.toFixed(1)}g`);
  }
  
  const caloriesProteines = proteines * 4;
  console.log(`üìä Calories prot√©ines: ${caloriesProteines.toFixed(0)}kcal`);
  
  // √âTAPE 2: Lipides = poidsObjectif √ó 1g (minimum 50g)
  let lipides = poidsObjectif * 1;
  
  // Application du minimum absolu de 50g
  if (lipides < 50) {
    console.log(`ü•ë Lipides calcul√©s (${lipides.toFixed(1)}g) < 50g ‚Üí application du minimum de s√©curit√©`);
    lipides = 50;
  }
  
  console.log(`ü•ë Lipides initiaux: ${poidsObjectif.toFixed(1)}kg √ó 1 = ${lipides.toFixed(1)}g`);
  
  // √âTAPE 3: NOUVELLE LOGIQUE GLUCIDES selon l'objectif
  let glucides: number;
  
  if (objectif === "perte") {
    // üÜï NOUVELLE LOGIQUE EXCLUSIVE pour perte de poids (POIDS ACTUEL)
    if (!poidsActuel) {
      throw new Error('Le poids actuel est requis pour le calcul des glucides en perte de poids');
    }
    
    console.log('üÜï APPLICATION DE LA NOUVELLE LOGIQUE GLUCIDES POUR PERTE DE POIDS (POIDS ACTUEL)');
    console.log('‚ùå SUPPRESSION de toute ancienne logique utilisant le poids objectif pour les glucides');
    
    glucides = calculateCarbsForWeightLoss(poidsActuel, activite);
    
    console.log(`üåæ Glucides (NOUVELLE LOGIQUE - POIDS ACTUEL): ${glucides}g`);
    
    // V√©rification de coh√©rence avec les calories totales
    const caloriesLipides = lipides * 9;
    const caloriesGlucides = glucides * 4;
    const caloriesCalculees = caloriesProteines + caloriesLipides + caloriesGlucides;
    
    console.log(`üìä V√©rification coh√©rence calories:`);
    console.log(`   ‚Ä¢ Prot√©ines: ${caloriesProteines.toFixed(0)}kcal`);
    console.log(`   ‚Ä¢ Lipides: ${caloriesLipides.toFixed(0)}kcal`);
    console.log(`   ‚Ä¢ Glucides: ${caloriesGlucides.toFixed(0)}kcal`);
    console.log(`   ‚Ä¢ Total calcul√©: ${caloriesCalculees.toFixed(0)}kcal`);
    console.log(`   ‚Ä¢ Objectif: ${caloriesTarget}kcal`);
    console.log(`   ‚Ä¢ √âcart: ${(caloriesCalculees - caloriesTarget).toFixed(0)}kcal (${(((caloriesCalculees / caloriesTarget) - 1) * 100).toFixed(1)}%)`);
    
    // Ajustement des lipides si l'√©cart est trop important (>10%)
    const ecartPourcentage = Math.abs((caloriesCalculees / caloriesTarget) - 1);
    if (ecartPourcentage > 0.10) {
      console.log(`‚ö†Ô∏è √âcart calories > 10% ‚Üí Ajustement automatique des lipides`);
      
      const caloriesRestantes = caloriesTarget - (caloriesProteines + caloriesGlucides);
      const nouveauxLipides = Math.max(50, caloriesRestantes / 9); // Minimum 50g
      const lipidesMaxAutorise = poidsObjectif * 1.1; // Maximum 1.1g/kg
      
      lipides = Math.min(nouveauxLipides, lipidesMaxAutorise);
      
      console.log(`ü•ë Lipides ajust√©s: ${lipides.toFixed(1)}g (min: 50g, max: ${lipidesMaxAutorise.toFixed(1)}g)`);
      
      // Recalcul final
      const nouvellesCaloriesLipides = lipides * 9;
      const nouvellesCaloriesTotales = caloriesProteines + nouvellesCaloriesLipides + caloriesGlucides;
      
      console.log(`üìä Apr√®s ajustement: ${nouvellesCaloriesTotales.toFixed(0)}kcal (√©cart: ${((nouvellesCaloriesTotales / caloriesTarget) * 100).toFixed(1)}%)`);
    }
    
  } else {
    // üîÑ ANCIENNE LOGIQUE conserv√©e pour maintien et prise
    console.log(`üîÑ Ancienne logique conserv√©e pour objectif "${objectif}"`);
    
    let caloriesLipides = lipides * 9;
    let caloriesRestantes = caloriesTarget - (caloriesProteines + caloriesLipides);
    glucides = Math.max(0, caloriesRestantes / 4);
    
    console.log(`üåæ Glucides (ancienne logique): (${caloriesTarget} - ${caloriesProteines.toFixed(0)} - ${caloriesLipides.toFixed(0)}) / 4 = ${glucides.toFixed(1)}g`);
    
    // V√©rification de la r√®gle des 50% pour les glucides (ancienne logique)
    const pourcentageGlucides = (glucides * 4) / caloriesTarget * 100;
    console.log(`üìà Pourcentage glucides: ${pourcentageGlucides.toFixed(1)}%`);
    
    if (pourcentageGlucides > 50) {
      console.log(`‚ö†Ô∏è D√âPASSEMENT: Glucides ${pourcentageGlucides.toFixed(1)}% > 50% ‚Üí AJUSTEMENT OBLIGATOIRE`);
      
      // R√©duire les glucides √† exactement 50%
      const glucidesMax = (caloriesTarget * 0.50) / 4;
      const reductionGlucides = glucides - glucidesMax;
      const caloriesAReaffecter = reductionGlucides * 4;
      
      console.log(`üîÑ R√©duction glucides: ${glucides.toFixed(1)}g ‚Üí ${glucidesMax.toFixed(1)}g (-${reductionGlucides.toFixed(1)}g)`);
      console.log(`üí∞ Calories √† r√©affecter aux lipides: ${caloriesAReaffecter.toFixed(0)}kcal`);
      
      // R√©injecter ces calories dans les lipides
      const lipidesSupplementaires = caloriesAReaffecter / 9;
      const nouveauxLipides = lipides + lipidesSupplementaires;
      
      // V√©rifier la limite max de 1.1g/kg
      const lipidesMaxAutorise = poidsObjectif * 1.1;
      const lipidesFinaux = Math.min(nouveauxLipides, lipidesMaxAutorise);
      
      console.log(`ü•ë Lipides apr√®s r√©injection: ${lipides.toFixed(1)}g + ${lipidesSupplementaires.toFixed(1)}g = ${nouveauxLipides.toFixed(1)}g`);
      console.log(`ü•ë Limite max (1.1g/kg): ${lipidesMaxAutorise.toFixed(1)}g`);
      console.log(`ü•ë Lipides finaux: ${lipidesFinaux.toFixed(1)}g`);
      
      // Recalculer les glucides avec les nouveaux lipides
      const nouvellesCaloriesLipides = lipidesFinaux * 9;
      const nouvellesCaloriesRestantes = caloriesTarget - (caloriesProteines + nouvellesCaloriesLipides);
      const nouveauxGlucides = Math.max(0, nouvellesCaloriesRestantes / 4);
      
      console.log(`üåæ Glucides finaux: (${caloriesTarget} - ${caloriesProteines.toFixed(0)} - ${nouvellesCaloriesLipides.toFixed(0)}) / 4 = ${nouveauxGlucides.toFixed(1)}g`);
      
      lipides = lipidesFinaux;
      glucides = nouveauxGlucides;
    }
  }
  
  // √âTAPE 4: V√©rification finale et r√©sultats
  const caloriesFinalesProteines = proteines * 4;
  const caloriesFinalesLipides = lipides * 9;
  const caloriesFinalesGlucides = glucides * 4;
  const totalCaloriesFinales = caloriesFinalesProteines + caloriesFinalesLipides + caloriesFinalesGlucides;
  
  const pourcentageFinaleProteines = (caloriesFinalesProteines / totalCaloriesFinales) * 100;
  const pourcentageFinaleGlucides = (caloriesFinalesGlucides / totalCaloriesFinales) * 100;
  const pourcentageFinaleLipides = (caloriesFinalesLipides / totalCaloriesFinales) * 100;
  
  console.log('üìä R√âPARTITION FINALE AVEC NOUVELLE LOGIQUE:');
  console.log(`   ‚Ä¢ Prot√©ines: ${Math.round(proteines)}g (${pourcentageFinaleProteines.toFixed(1)}%) - ${caloriesFinalesProteines.toFixed(0)}kcal`);
  console.log(`   ‚Ä¢ Lipides: ${Math.round(lipides)}g (${pourcentageFinaleLipides.toFixed(1)}%) - ${caloriesFinalesLipides.toFixed(0)}kcal`);
  console.log(`   ‚Ä¢ Glucides: ${Math.round(glucides)}g (${pourcentageFinaleGlucides.toFixed(1)}%) - ${caloriesFinalesGlucides.toFixed(0)}kcal`);
  console.log(`   ‚Ä¢ TOTAL: ${totalCaloriesFinales.toFixed(0)}kcal (objectif: ${caloriesTarget}kcal)`);
  
  if (objectif === "perte") {
    console.log('üéØ NOUVELLE LOGIQUE GLUCIDES APPLIQU√âE AVEC SUCC√àS pour perte de poids (POIDS ACTUEL)');
    console.log(`   ‚Ä¢ Glucides calcul√©s selon: ${activite === "√©lev√©" ? "2.5g" : "2.0g"} √ó poids actuel`);
    console.log(`   ‚Ä¢ Respect de la plage ¬±5%: ${Math.abs((glucides / calculateCarbsForWeightLoss(poidsActuel!, activite)) - 1) <= 0.05 ? "‚úÖ" : "‚ùå"}`);
  }
  
  // V√©rifications de conformit√©
  const conformiteGlucides = objectif === "perte" ? true : pourcentageFinaleGlucides <= 55; // Pas de limite pour perte
  const conformiteLipides = lipides >= 50 && lipides <= poidsObjectif * 1.1;
  
  console.log('üîç V√âRIFICATIONS DE CONFORMIT√â:');
  if (objectif === "perte") {
    console.log(`   ‚Ä¢ Glucides (nouvelle logique): ‚úÖ (${glucides}g selon poids actuel)`);
  } else {
    console.log(`   ‚Ä¢ Glucides ‚â§ 55%: ${conformiteGlucides ? '‚úÖ' : '‚ùå'} (${pourcentageFinaleGlucides.toFixed(1)}%)`);
  }
  console.log(`   ‚Ä¢ Lipides 50-${(poidsObjectif * 1.1).toFixed(1)}g: ${conformiteLipides ? '‚úÖ' : '‚ùå'} (${lipides.toFixed(1)}g)`);
  console.log(`   ‚Ä¢ Prot√©ines fixes: ‚úÖ (${proteines.toFixed(1)}g)`);
  
  return {
    proteines: Math.round(proteines),
    lipides: Math.round(lipides),
    glucides: Math.round(glucides)
  };
}

export function useNutritionCalculator() {
  return {
    calculateMaintenanceNeeds,
    optimizeMacronutrientDistribution
  };
}