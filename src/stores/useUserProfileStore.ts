import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export interface UserProfile {
  // Données personnelles
  prenom: string;
  age: number;
  sexe: "homme" | "femme";
  poids: number; // kg
  taille: number; // cm
  
  // Style de vie
  activite: "sédentaire" | "léger" | "modéré" | "élevé";
  travail: "sédentaire" | "actif";
  sommeil: number; // note de 1 à 5
  medicaments: boolean;
  
  // Composition corporelle
  estimatedBodyFat?: number; // pourcentage de masse grasse estimé
  
  // Objectifs nutritionnels
  objectif: "perte" | "maintien" | "prise";
  repasParJour: number;
  collationsParJour: number;
  
  // Horaire du premier repas (optionnel)
  heurePremierRepas?: string;
  
  // Restrictions alimentaires (optionnelles)
  restrictionsAlimentaires?: string[];
  autreRestriction?: string;
  
  // Résultats nutritionnels calculés
  nutritionalResults?: {
    metabolismeBase: number;
    caloriesMaintien: number;
    caloriesObjectif: number;
    proteines: number;
    glucides: number;
    lipides: number;
    masseMaigre: number;
  };
  
  // Métadonnées
  profileCompleted?: boolean;
  completedAt?: string;
  updatedAt?: string;
  
  // Diète générée automatiquement
  generatedDiet?: {
    repas: any[];
    totalCalories: number;
    totalProteines: number;
    totalGlucides: number;
    totalLipides: number;
    success: boolean;
    validationMessage?: string;
    generatedAt: string;
    repasParJour: number;
    collationsParJour: number;
    autoGenerated?: boolean;
  };
}

interface UserProfileStore {
  profile: UserProfile | null;
  isProfileComplete: boolean;
  currentDiet: any | null;
  
  // Actions
  setUserProfile: (profile: Partial<UserProfile>) => void;
  updateUserProfile: (updates: Partial<UserProfile>) => void;
  getUserProfile: () => UserProfile | null;
  clearUserProfile: () => void;
  setCurrentDiet: (diet: any) => void;
  getCurrentDiet: () => any | null;
  clearCurrentDiet: () => void;
  
  // Helpers
  getBasicProfile: () => Pick<UserProfile, 'prenom' | 'age' | 'sexe' | 'poids' | 'taille' | 'activite'> | null;
  isOnboardingComplete: () => boolean;
  isGoalsComplete: () => boolean;
}

const initialProfile: UserProfile = {
  prenom: '',
  age: 0,
  sexe: 'homme',
  poids: 0,
  taille: 0,
  activite: 'sédentaire',
  travail: 'sédentaire',
  sommeil: 3,
  medicaments: false,
  objectif: 'maintien',
  repasParJour: 3,
  collationsParJour: 1,
  heurePremierRepas: '',
  restrictionsAlimentaires: [],
  autreRestriction: ''
};

export const useUserProfileStore = create<UserProfileStore>()(
  persist(
    (set, get) => ({
      profile: null,
      isProfileComplete: false,
      currentDiet: null,

      setUserProfile: (profile: Partial<UserProfile>) => {
        set((state) => {
          const newProfile = { ...initialProfile, ...profile };
          const isComplete = checkProfileCompleteness(newProfile);
          
          return {
            profile: newProfile,
            isProfileComplete: isComplete
          };
        });
      },

      updateUserProfile: (updates: Partial<UserProfile>) => {
        set((state) => {
          if (!state.profile) {
            // Si pas de profil existant, créer un nouveau
            const newProfile = { ...initialProfile, ...updates };
            const isComplete = checkProfileCompleteness(newProfile);
            
            return {
              profile: newProfile,
              isProfileComplete: isComplete
            };
          }
          
          const updatedProfile = { ...state.profile, ...updates };
          const isComplete = checkProfileCompleteness(updatedProfile);
          
          return {
            profile: updatedProfile,
            isProfileComplete: isComplete
          };
        });
      },

      getUserProfile: () => {
        return get().profile;
      },

      clearUserProfile: () => {
        set({
          profile: null,
          isProfileComplete: false,
          currentDiet: null
        });
      },

      setCurrentDiet: (diet: any) => {
        set({ currentDiet: diet });
      },

      getCurrentDiet: () => {
        return get().currentDiet;
      },

      clearCurrentDiet: () => {
        set({ currentDiet: null });
      },

      getBasicProfile: () => {
        const profile = get().profile;
        if (!profile) return null;
        
        return {
          prenom: profile.prenom,
          age: profile.age,
          sexe: profile.sexe,
          poids: profile.poids,
          taille: profile.taille,
          activite: profile.activite
        };
      },

      isOnboardingComplete: () => {
        const profile = get().profile;
        if (!profile) return false;
        
        return !!(
          profile.prenom &&
          profile.age > 0 &&
          profile.sexe &&
          profile.poids > 0 &&
          profile.taille > 0 &&
          profile.activite &&
          profile.travail &&
          profile.sommeil > 0
        );
      },

      isGoalsComplete: () => {
        const profile = get().profile;
        if (!profile) return false;
        
        return !!(
          profile.objectif &&
          profile.repasParJour > 0 &&
          profile.collationsParJour >= 0
        );
      }
    }),
    {
      name: 'user-profile-storage', // nom de la clé dans localStorage
      partialize: (state) => ({ 
        profile: state.profile,
        isProfileComplete: state.isProfileComplete,
        currentDiet: state.currentDiet
      }), // ne persister que le profil et son état de complétude
    }
  )
);

// Fonction helper pour vérifier la complétude du profil
function checkProfileCompleteness(profile: UserProfile): boolean {
  return !!(
    profile.prenom &&
    profile.age > 0 &&
    profile.sexe &&
    profile.poids > 0 &&
    profile.taille > 0 &&
    profile.activite &&
    profile.travail &&
    profile.sommeil > 0 &&
    profile.estimatedBodyFat &&
    profile.objectif &&
    profile.profileCompleted
  );
}

// Hooks utilitaires pour des cas d'usage spécifiques
export const useUserProfile = () => {
  const profile = useUserProfileStore((state) => state.profile);
  const isComplete = useUserProfileStore((state) => state.isProfileComplete);
  const updateProfile = useUserProfileStore((state) => state.updateUserProfile);
  
  return {
    profile,
    isComplete,
    updateProfile
  };
};

export const useOnboardingData = () => {
  const profile = useUserProfileStore((state) => state.profile);
  const isOnboardingComplete = useUserProfileStore((state) => state.isOnboardingComplete);
  const updateProfile = useUserProfileStore((state) => state.updateUserProfile);
  
  return {
    profile,
    isOnboardingComplete: isOnboardingComplete(),
    updateProfile
  };
};

export const useGoalsData = () => {
  const profile = useUserProfileStore((state) => state.profile);
  const isGoalsComplete = useUserProfileStore((state) => state.isGoalsComplete);
  const updateProfile = useUserProfileStore((state) => state.updateUserProfile);
  
  return {
    profile,
    isGoalsComplete: isGoalsComplete(),
    updateProfile
  };
};

export const useNutritionProfile = () => {
  const getBasicProfile = useUserProfileStore((state) => state.getBasicProfile);
  const profile = useUserProfileStore((state) => state.profile);
  
  return {
    basicProfile: getBasicProfile(),
    fullProfile: profile
  };
};